"""
Grades Management View - Qu·∫£n l√Ω ƒëi·ªÉm s·ªë
"""

import tkinter as tk
from tkinter import ttk, messagebox
from .base_view import BaseContentView
from config.constants import COLORS
from models import api_client


class GradesManagementView(BaseContentView):
    """View cho qu·∫£n l√Ω ƒëi·ªÉm s·ªë"""
    
    def __init__(self, parent_frame: ttk.Frame):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu tr∆∞·ªõc khi g·ªçi super().__init__()
        self.grades_data = []
        self.search_var = tk.StringVar()
        # self._load_sample_data()
        self.load_students()
        
        super().__init__(parent_frame, "üìù Qu·∫£n l√Ω ƒëi·ªÉm s·ªë")
        self._setup_white_background()
    
    def _create_content(self):
        """T·∫°o n·ªôi dung qu·∫£n l√Ω ƒëi·ªÉm"""
        # C·∫•u h√¨nh grid weights cho content_frame
        self.content_frame.rowconfigure(0, weight=0)  # Toolbar - kh√¥ng expand
        self.content_frame.rowconfigure(1, weight=1)  # Table - expand to√†n b·ªô
        self.content_frame.rowconfigure(2, weight=0)  # Status bar - kh√¥ng expand
      
        # Toolbar
        self._create_toolbar()
       
        # Grades table
        self._create_grades_table()
        
        # Status bar
        self._create_status_bar()
        
        # C·∫≠p nh·∫≠t background sau khi t·∫°o xong
        self._update_white_background()
    
    def _setup_white_background(self):
        """Thi·∫øt l·∫≠p background m√†u tr·∫Øng cho to√†n b·ªô view"""
        self.main_frame.configure(style="White.TFrame")
        self.content_frame.configure(style="White.TFrame")
    
    def _update_white_background(self):
        """C·∫≠p nh·∫≠t background m√†u tr·∫Øng cho t·∫•t c·∫£ c√°c frame con"""
        for widget in self.content_frame.winfo_children():
            if isinstance(widget, ttk.Frame):
                widget.configure(style="White.TFrame")
                for child in widget.winfo_children():
                    if isinstance(child, ttk.Frame):
                        child.configure(style="White.TFrame")

    def load_students(self):
        """Load danh s√°ch h·ªçc sinh"""
        try:
            response = api_client.get_students(page=1, page_size=1000, search= self.search_var.get())
            # L·∫•y danh s√°ch h·ªçc sinh t·ª´ response
            if isinstance(response, dict) and "items" in response:
                self.grades_data = response["items"]
            else:
                self.grades_data = response if isinstance(response, list) else []
            print("Binh test grades_data 2", self.grades_data)
        except Exception as e:
            print(f"Error loading students: {e}")
            self.grades_data = []
    
    def _create_toolbar(self):
        """T·∫°o toolbar v·ªõi c√°c n√∫t ch·ª©c nƒÉng"""
        toolbar_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        toolbar_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=(0, 5))
        toolbar_frame.columnconfigure(1, weight=1)

        search_view = ttk.Entry(toolbar_frame, textvariable = self.search_var, width=60)
        search_view.grid(row=0, column=0, padx=(0, 5))
        search_view.insert(0, "T√¨m ki·∫øm h·ªçc sinh")
        search_view.bind("<FocusIn>", lambda e: self.search_var.set("") if self.search_var.get() == "T√¨m ki·∫øm h·ªçc sinh" else None)

        def _on_focus_out(_e):
            val = self.search_var.get().strip()
            if val == "":
                self.search_var.set("T√¨m ki·∫øm h·ªçc sinh")
        search_view.bind("<FocusOut>", _on_focus_out)
        
        edit_btn = ttk.Button(toolbar_frame, text="T√¨m ki·∫øm", 
                            command=self._on_search)
        edit_btn.grid(row=0, column=2, padx=(0, 5))
        
        # N√∫t demo performance
        demo_btn = ttk.Button(toolbar_frame, text="üìä Demo H·ªçc L·ª±c", 
                             command=self._show_performance_demo)
        demo_btn.grid(row=0, column=3, padx=(0, 5))
        
        # N√∫t x√≥a ƒëi·ªÉm
        delete_btn = ttk.Button(toolbar_frame, text="üóëÔ∏è X√≥a ƒëi·ªÉm", 
                              command=self._delete_grade)
        delete_btn.grid(row=0, column=4, padx=(0, 5))
        
        # N√∫t refresh
        refresh_btn = ttk.Button(toolbar_frame, text="üîÑ Refresh", 
                               command=self._refresh_data)
        refresh_btn.grid(row=0, column=5, padx=(0, 5))
        
        # Filter options
        filter_frame = ttk.Frame(toolbar_frame, style="White.TFrame")
        filter_frame.grid(row=0, column=6, sticky="e")
        
        ttk.Label(filter_frame, text="L·ªõp:", style="White.TLabel").grid(row=0, column=0, padx=(0, 3))
        self.class_var = tk.StringVar()
        class_combo = ttk.Combobox(filter_frame, textvariable=self.class_var, width=8)
        class_combo['values'] = ("T·∫•t c·∫£", "10A1", "10A2", "11A1", "11A2", "12A1")
        class_combo.set("T·∫•t c·∫£")
        class_combo.grid(row=0, column=1, padx=(0, 5))
        
        ttk.Label(filter_frame, text="M√¥n:", style="White.TLabel").grid(row=0, column=2, padx=(0, 3))
        self.subject_var = tk.StringVar()
        subject_combo = ttk.Combobox(filter_frame, textvariable=self.subject_var, width=8)
        subject_combo['values'] = ("T·∫•t c·∫£", "To√°n", "L√Ω", "H√≥a", "Sinh", "VƒÉn")
        subject_combo.set("T·∫•t c·∫£")
        subject_combo.grid(row=0, column=3)
    
    def _create_grades_table(self):
        """T·∫°o b·∫£ng danh s√°ch ƒëi·ªÉm"""
        # Frame cho table
        table_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        table_frame.grid(row=1, column=0, sticky="nsew", padx=5, pady=(0, 5))
        table_frame.columnconfigure(0, weight=1)
        table_frame.rowconfigure(0, weight=1)
        
        # Treeview cho table - s·ª≠ d·ª•ng to√†n b·ªô chi·ªÅu cao c√≥ s·∫µn
        columns = ("ID", "H·ªç t√™n", "To√°n", "VƒÉn", "Anh", "GPA", "H·ªçc l·ª±c", "S·ª≠a")
        self.tree = ttk.Treeview(table_frame, columns=columns, show="headings")
        
        # C·∫•u h√¨nh columns
        for col in columns:
            self.tree.heading(col, text=col)
        
        # C·∫•u h√¨nh width
        self.tree.column("ID", width=50, minwidth=50)
        self.tree.column("H·ªç t√™n", width=150, minwidth=120)
        self.tree.column("To√°n", width=80, minwidth=80)
        self.tree.column("VƒÉn", width=80, minwidth=80)
        self.tree.column("Anh", width=60, minwidth=60)
        self.tree.column("GPA", width=100, minwidth=100)
        self.tree.column("H·ªçc l·ª±c", width=100, minwidth=100)
        self.tree.column("S·ª≠a", width=80, minwidth=80)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # Grid
        self.tree.grid(row=0, column=0, sticky="nsew")
        scrollbar.grid(row=0, column=1, sticky="ns")
        
        # Bind events
        self.tree.bind('<Double-1>', self._on_double_click)
        self.tree.bind('<Button-1>', self._on_click)
        
        # Load data
        self._load_grades_to_table()
    
    def _create_status_bar(self):
        """T·∫°o status bar"""
        self.status_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        self.status_frame.grid(row=2, column=0, sticky="ew", padx=5, pady=(0, 5))
        self.status_frame.columnconfigure(0, weight=1)
        
        self.status_label = ttk.Label(self.status_frame, text="S·∫µn s√†ng", 
                                    style="White.TLabel")
        self.status_label.grid(row=0, column=0, sticky="w")
        
        # C·∫≠p nh·∫≠t status
        self._update_status()
    
    def _load_grades_to_table(self):
        """Load d·ªØ li·ªáu ƒëi·ªÉm v√†o table"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Th√™m d·ªØ li·ªáu m·ªõi
        for grade in self.grades_data:
            # T√≠nh GPA (trung b√¨nh c·ªông 3 m√¥n)
            math_score = grade.get("math_score") or 0
            lit_score = grade.get("literature_score") or 0
            eng_score = grade.get("english_score") or 0
            
            # Ch·ªâ t√≠nh GPA n·∫øu c√≥ √≠t nh·∫•t 1 ƒëi·ªÉm
            if math_score or lit_score or eng_score:
                gpa = (math_score + lit_score + eng_score) / 3
            else:
                gpa = 0
                
            # T·∫°o badge h·ªçc l·ª±c
            performance_badge = self._create_performance_badge(gpa)
            
            # Th√™m d·ªØ li·ªáu v√†o tree v·ªõi c·ªôt H·ªçc l·ª±c v√† S·ª≠a
            item = self.tree.insert("", "end", values=(
                grade.get("student_code", ""),
                f"{grade.get('first_name', '')} {grade.get('last_name', '')}".strip(),
                math_score if math_score else "",
                lit_score if lit_score else "",
                eng_score if eng_score else "",
                round(gpa, 2) if gpa else "",
                performance_badge,  # C·ªôt H·ªçc l·ª±c
                "‚úèÔ∏è S·ª≠a"  # C·ªôt S·ª≠a trong b·∫£ng
            ))
            
            # L∆∞u grade data v√†o item ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p sau
            self.tree.set(item, "S·ª≠a", "‚úèÔ∏è S·ª≠a")
    
    def _on_click(self, event):
        """X·ª≠ l√Ω click v√†o table"""
        # L·∫•y item ƒë∆∞·ª£c click
        item = self.tree.identify('item', event.x, event.y)
        column = self.tree.identify('column', event.x, event.y)
        
        if item and column:
            # Ki·ªÉm tra xem c√≥ click v√†o c·ªôt "S·ª≠a" kh√¥ng (c·ªôt cu·ªëi c√πng)
            try:
                column_index = int(column[1:]) - 1  # B·ªè k√Ω t·ª± # ·ªü ƒë·∫ßu
                if column_index == 7:  # C·ªôt "S·ª≠a" l√† c·ªôt th·ª© 8 (index 7) sau khi th√™m H·ªçc l·ª±c
                    # L·∫•y d·ªØ li·ªáu h·ªçc sinh t·ª´ item
                    values = self.tree.item(item)['values']
                    student_code = values[0]
                    
                    # T√¨m grade data t∆∞∆°ng ·ª©ng
                    for grade in self.grades_data:
                        if grade.get("student_code") == student_code:
                            self._edit_grade_for_student(grade)
                            break
            except (ValueError, IndexError):
                pass
    
    def _on_double_click(self, event):
        """X·ª≠ l√Ω double click"""
        self._edit_grade()
    
    def _on_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn item"""
        pass
    
    def _add_grade(self):
        """Th√™m ƒëi·ªÉm m·ªõi"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√™m ƒëi·ªÉm - ƒêang ph√°t tri·ªÉn")
    
    def _edit_grade_for_student(self, grade_data):
        """S·ª≠a ƒëi·ªÉm cho h·ªçc sinh c·ª• th·ªÉ"""
        student_code = grade_data.get("student_code", "")
        student_name = f"{grade_data.get('first_name', '')} {grade_data.get('last_name', '')}".strip()
        current_math = grade_data.get("math_score") or ""
        current_lit = grade_data.get("literature_score") or ""
        current_eng = grade_data.get("english_score") or ""
        
        # T·∫°o popup s·ª≠a ƒëi·ªÉm
        self._show_edit_grades_popup(student_code, student_name, current_math, current_lit, current_eng)
    
    def _on_search(self):
        """X·ª≠ l√Ω t√¨m ki·∫øm"""
        search_term = self.search_var.get().lower()
        if (search_term == "T√¨m ki·∫øm h·ªçc sinh"):
            return
            
        if not search_term:
            self._load_grades_to_table()
            return
        
        # Filter data
        self.load_students()
        self._load_grades_to_table()

    def _edit_grade(self):
        """S·ª≠a ƒëi·ªÉm (cho double click)"""
        # L·∫•y item ƒë∆∞·ª£c ch·ªçn
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h·ªçc sinh c·∫ßn s·ª≠a ƒëi·ªÉm")
            return
        
        # L·∫•y th√¥ng tin h·ªçc sinh
        item = self.tree.item(selected[0])
        values = item['values']
        student_code = values[0]
        student_name = values[1]
        current_math = values[2] if values[2] else ""
        current_lit = values[3] if values[3] else ""
        current_eng = values[4] if values[4] else ""
        
        # T·∫°o popup s·ª≠a ƒëi·ªÉm
        self._show_edit_grades_popup(student_code, student_name, current_math, current_lit, current_eng)
    
    def _show_edit_grades_popup(self, student_code, student_name, current_math, current_lit, current_eng):
        """Hi·ªÉn th·ªã popup s·ª≠a ƒëi·ªÉm"""
        # T·∫°o popup window - s·ª≠ d·ª•ng parent_frame thay v√¨ self
        popup = tk.Toplevel(self.parent_frame.winfo_toplevel())
        popup.title(f"S·ª≠a ƒëi·ªÉm - {student_name}")
        popup.geometry("400x300")
        popup.resizable(False, False)
        
        # CƒÉn gi·ªØa popup
        popup.transient(self.parent_frame.winfo_toplevel())
        popup.grab_set()
        
        # Main frame
        main_frame = ttk.Frame(popup, padding=20)
        main_frame.pack(fill="both", expand=True)
        
        # Title
        title_label = ttk.Label(main_frame, text=f"S·ª≠a ƒëi·ªÉm cho {student_name}", 
                               font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Form frame
        form_frame = ttk.Frame(main_frame)
        form_frame.pack(fill="x", pady=(0, 20))
        
        # ƒêi·ªÉm To√°n
        ttk.Label(form_frame, text="ƒêi·ªÉm To√°n:").grid(row=0, column=0, sticky="w", pady=5)
        math_var = tk.StringVar(value=str(current_math))
        math_entry = ttk.Entry(form_frame, textvariable=math_var, width=20)
        math_entry.grid(row=0, column=1, sticky="ew", padx=(10, 0), pady=5)
        
        # ƒêi·ªÉm VƒÉn
        ttk.Label(form_frame, text="ƒêi·ªÉm VƒÉn:").grid(row=1, column=0, sticky="w", pady=5)
        lit_var = tk.StringVar(value=str(current_lit))
        lit_entry = ttk.Entry(form_frame, textvariable=lit_var, width=20)
        lit_entry.grid(row=1, column=1, sticky="ew", padx=(10, 0), pady=5)
        
        # ƒêi·ªÉm Anh
        ttk.Label(form_frame, text="ƒêi·ªÉm Anh:").grid(row=2, column=0, sticky="w", pady=5)
        eng_var = tk.StringVar(value=str(current_eng))
        eng_entry = ttk.Entry(form_frame, textvariable=eng_var, width=20)
        eng_entry.grid(row=2, column=1, sticky="ew", padx=(10, 0), pady=5)
        
        # C·∫•u h√¨nh grid
        form_frame.columnconfigure(1, weight=1)
        
        # Button frame
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(0, 10))
        
        # Buttons
        def save_grades():
            try:
                # Validate input
                math_score = float(math_var.get()) if math_var.get().strip() else None
                lit_score = float(lit_var.get()) if lit_var.get().strip() else None
                eng_score = float(eng_var.get()) if eng_var.get().strip() else None
                
                # Validate range
                for score, name in [(math_score, "To√°n"), (lit_score, "VƒÉn"), (eng_score, "Anh")]:
                    if score is not None and (score < 0 or score > 10):
                        messagebox.showerror("L·ªói", f"ƒêi·ªÉm {name} ph·∫£i t·ª´ 0 ƒë·∫øn 10")
                        return
                
                # T·∫°o payload
                grades = {}
                if math_score is not None:
                    grades["math_score"] = math_score
                if lit_score is not None:
                    grades["literature_score"] = lit_score
                if eng_score is not None:
                    grades["english_score"] = eng_score
                
                # G·ªçi API
                print(f"Updating grades for {student_code}: {grades}")
                updated_student = api_client.update_student_grades(student_code, grades)
                print(f"API response: {updated_student}")
                
                # C·∫≠p nh·∫≠t local data
                found = False
                for i, student in enumerate(self.grades_data):
                    if student.get("student_code") == student_code:
                        # C·∫≠p nh·∫≠t t·ª´ng field ri√™ng bi·ªát
                        if "math_score" in updated_student:
                            self.grades_data[i]["math_score"] = updated_student["math_score"]
                        if "literature_score" in updated_student:
                            self.grades_data[i]["literature_score"] = updated_student["literature_score"]
                        if "english_score" in updated_student:
                            self.grades_data[i]["english_score"] = updated_student["english_score"]
                        found = True
                        print(f"Updated local data for {student_code}")
                        break
                
                if not found:
                    print(f"Warning: Student {student_code} not found in local data")
                
                # Refresh table
                print("Refreshing table...")
                self._load_grades_to_table()
                self._update_status()
                print("Table refreshed successfully")
                
                # Backup: Reload data from server ƒë·ªÉ ƒë·∫£m b·∫£o sync
                try:
                    print("Reloading data from server as backup...")
                    self.load_students()
                    self._load_grades_to_table()
                    self._update_status()
                    print("Server reload completed")
                except Exception as e:
                    print(f"Server reload failed: {e}")
                
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng")
                popup.destroy()
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒëi·ªÉm h·ª£p l·ªá (s·ªë t·ª´ 0 ƒë·∫øn 10)")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÉm: {str(e)}")
        
        def cancel():
            popup.destroy()
        
        ttk.Button(button_frame, text="H·ªßy", command=cancel).pack(side="right", padx=(10, 0))
        ttk.Button(button_frame, text="L∆∞u", command=save_grades).pack(side="right")
        
        # Focus v√†o entry ƒë·∫ßu ti√™n
        math_entry.focus()
        
        # Bind Enter key
        popup.bind('<Return>', lambda e: save_grades())
        popup.bind('<Escape>', lambda e: cancel())
    
    def _delete_grade(self):
        """X√≥a ƒëi·ªÉm"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ƒëi·ªÉm c·∫ßn x√≥a")
            return
        
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒëi·ªÉm n√†y?"):
            # X√≥a kh·ªèi data
            item = self.tree.item(selected[0])
            student_code = item['values'][0]  # L·∫•y student_code thay v√¨ student_id
            self.grades_data = [g for g in self.grades_data if g.get('student_code') != student_code]
            
            # C·∫≠p nh·∫≠t table
            self._load_grades_to_table()
            self._update_status()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a ƒëi·ªÉm th√†nh c√¥ng")
    
    def _update_status(self):
        """C·∫≠p nh·∫≠t status bar"""
        total_grades = len(self.grades_data)
        self.status_label.config(text=f"T·ªïng s·ªë h·ªçc sinh: {total_grades}")
    
    def refresh(self):
        """Refresh view"""
        self._load_grades_to_table()
        self._update_status()
    
    def _refresh_data(self):
        """Refresh d·ªØ li·ªáu t·ª´ server"""
        try:
            print("Refreshing data from server...")
            self.search_var.set("");
            self.load_students()
            self._load_grades_to_table()
            self._update_status()
            self.search_var.set("T√¨m ki·∫øm h·ªçc sinh");
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ refresh d·ªØ li·ªáu t·ª´ server")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ refresh d·ªØ li·ªáu: {str(e)}")
    
    def _evaluate_academic_performance(self, gpa):
        """ƒê√°nh gi√° h·ªçc l·ª±c d·ª±a tr√™n GPA"""
        if gpa is None or gpa == 0:
            return ("Ch∆∞a c√≥ ƒëi·ªÉm", "#E5E7EB", "#6B7280")  # X√°m
        
        if gpa >= 9.0:
            return ("Gi·ªèi", "#DCFCE7", "#166534")  # Xanh l√° c√¢y
        elif gpa >= 7.0:
            return ("Kh√°", "#DBEAFE", "#1E40AF")  # Xanh n∆∞·ªõc bi·ªÉn
        elif gpa >= 6.0:
            return ("Trung b√¨nh", "#FEF3C7", "#D97706")  # V√†ng cam
        else:
            return ("Y·∫øu", "#FEE2E2", "#DC2626")  # ƒê·ªè
    
    def _create_performance_badge(self, gpa):
        """T·∫°o badge hi·ªÉn th·ªã h·ªçc l·ª±c v·ªõi m√†u s·∫Øc"""
        performance, _, _ = self._evaluate_academic_performance(gpa)
        
        # T·∫°o chu·ªói hi·ªÉn th·ªã v·ªõi emoji v√† m√†u s·∫Øc
        if gpa is None or gpa == 0:
            emoji = "‚ö™"  # Tr·∫Øng
        elif gpa >= 9.0:
            emoji = "üü¢"  # Xanh l√°
        elif gpa >= 7.0:
            emoji = "üîµ"  # Xanh d∆∞∆°ng
        elif gpa >= 6.0:
            emoji = "üü°"  # V√†ng
        else:
            emoji = "üî¥"  # ƒê·ªè
        
        return f"{emoji} {performance}"
    
    def _create_performance_label(self, parent, gpa):
        """T·∫°o Label hi·ªÉn th·ªã h·ªçc l·ª±c v·ªõi m√†u s·∫Øc th·ª±c s·ª±"""
        performance, bg_color, text_color = self._evaluate_academic_performance(gpa)
        
        # T·∫°o Label v·ªõi m√†u s·∫Øc th·ª±c s·ª±
        label = tk.Label(parent, 
                        text=performance,
                        bg=bg_color,
                        fg=text_color,
                        font=("Helvetica", 9, "bold"),
                        padx=8,
                        pady=2,
                        relief="flat",
                        bd=1)
        
        return label
    
    def _get_performance_color(self, gpa):
        """L·∫•y m√†u s·∫Øc cho h·ªçc l·ª±c"""
        _, bg_color, text_color = self._evaluate_academic_performance(gpa)
        return bg_color, text_color
    
    def _show_performance_demo(self):
        """Hi·ªÉn th·ªã demo ƒë√°nh gi√° h·ªçc l·ª±c v·ªõi Label m√†u s·∫Øc"""
        # T·∫°o popup window
        popup = tk.Toplevel()
        popup.title("üìä Demo ƒê√°nh Gi√° H·ªçc L·ª±c - Label M√†u S·∫Øc")
        popup.geometry("700x500")
        popup.configure(bg="#f1f5f9")
        
        # T·∫°o frame ch√≠nh
        main_frame = ttk.Frame(popup, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(popup, text="üìä ƒê√°nh Gi√° H·ªçc L·ª±c v·ªõi Label M√†u S·∫Øc", 
                              font=("Helvetica", 16, "bold"), 
                              bg="#f1f5f9", fg="#1f2937")
        title_label.pack(pady=10)
        
        # T·∫°o frame cho demo
        demo_frame = ttk.Frame(main_frame)
        demo_frame.pack(fill=tk.BOTH, expand=True)
        
        # Test cases v·ªõi c√°c GPA kh√°c nhau
        test_cases = [
            (9.5, "Nguyen Van An", "Gi·ªèi"),
            (8.2, "Tran Thi Binh", "Kh√°"),
            (6.8, "Le Van Cuong", "Trung b√¨nh"),
            (5.5, "Pham Thi Dung", "Y·∫øu"),
            (0, "Hoang Van Em", "Ch∆∞a c√≥ ƒëi·ªÉm"),
            (None, "Vu Thi Phuong", "Ch∆∞a c√≥ ƒëi·ªÉm")
        ]
        
        # T·∫°o grid cho demo
        for i, (gpa, name, expected) in enumerate(test_cases):
            row = i // 2
            col = i % 2
            
            # Frame cho m·ªói test case
            case_frame = ttk.Frame(demo_frame)
            case_frame.grid(row=row, column=col, padx=15, pady=15, sticky="ew")
            
            # Label t√™n
            name_label = tk.Label(case_frame, text=name, 
                                font=("Helvetica", 12, "bold"),
                                bg="#f1f5f9", fg="#1f2937")
            name_label.pack(pady=5)
            
            # Label GPA
            gpa_text = f"GPA: {gpa}" if gpa is not None else "GPA: Ch∆∞a c√≥"
            gpa_label = tk.Label(case_frame, text=gpa_text, 
                               font=("Helvetica", 10),
                               bg="#f1f5f9", fg="#6b7280")
            gpa_label.pack()
            
            # T·∫°o performance label v·ªõi m√†u s·∫Øc th·ª±c s·ª±
            performance_label = self._create_performance_label(case_frame, gpa)
            performance_label.pack(pady=10)
            
            # Label th√¥ng tin m√†u s·∫Øc
            _, bg_color, text_color = self._evaluate_academic_performance(gpa)
            color_info = f"BG: {bg_color[:7]} | Text: {text_color[:7]}"
            color_label = tk.Label(case_frame, text=color_info, 
                                 font=("Helvetica", 8),
                                 bg="#f1f5f9", fg="#6b7280")
            color_label.pack()
        
        # Th√™m label h∆∞·ªõng d·∫´n
        guide_label = tk.Label(popup, 
                              text="üü¢ Gi·ªèi (‚â•9.0) | üîµ Kh√° (‚â•7.0) | üü° Trung b√¨nh (‚â•6.0) | üî¥ Y·∫øu (<6.0)",
                              font=("Helvetica", 11),
                              bg="#f1f5f9", fg="#6b7280")
        guide_label.pack(pady=10)
        
        # N√∫t ƒë√≥ng
        close_btn = ttk.Button(popup, text="ƒê√≥ng", command=popup.destroy)
        close_btn.pack(pady=10)



