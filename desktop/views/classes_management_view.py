"""
Classes Management View - Qu·∫£n l√Ω l·ªõp h·ªçc
"""

import tkinter as tk
from tkinter import ttk, messagebox
from .base_view import BaseContentView
from config.constants import COLORS


class ClassesManagementView(BaseContentView):
    """View cho qu·∫£n l√Ω l·ªõp h·ªçc"""
    
    def __init__(self, parent_frame: ttk.Frame):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu tr∆∞·ªõc khi g·ªçi super().__init__()
        self.classes_data = []
        self._load_sample_data()
        
        super().__init__(parent_frame, "üìö Qu·∫£n l√Ω l·ªõp h·ªçc")
        self._setup_white_background()
    
    def _create_content(self):
        """T·∫°o n·ªôi dung qu·∫£n l√Ω l·ªõp h·ªçc"""
        # Toolbar
        self._create_toolbar()
        
        # Classes table
        self._create_classes_table()
        
        # Status bar
        self._create_status_bar()
        
        # C·∫≠p nh·∫≠t background sau khi t·∫°o xong
        self._update_white_background()
    
    def _setup_white_background(self):
        """Thi·∫øt l·∫≠p background m√†u tr·∫Øng cho to√†n b·ªô view"""
        self.main_frame.configure(style="White.TFrame")
        self.content_frame.configure(style="White.TFrame")
    
    def _update_white_background(self):
        """C·∫≠p nh·∫≠t background m√†u tr·∫Øng cho t·∫•t c·∫£ c√°c frame con"""
        for widget in self.content_frame.winfo_children():
            if isinstance(widget, ttk.Frame):
                widget.configure(style="White.TFrame")
                for child in widget.winfo_children():
                    if isinstance(child, ttk.Frame):
                        child.configure(style="White.TFrame")
    
    def _load_sample_data(self):
        """Load d·ªØ li·ªáu m·∫´u cho l·ªõp h·ªçc"""
        self.classes_data = [
            {"class_id": "10A1", "class_name": "L·ªõp 10A1", "homeroom_teacher": "Nguy·ªÖn VƒÉn A", 
             "student_count": 35, "room": "A101", "schedule": "S√°ng"},
            {"class_id": "10A2", "class_name": "L·ªõp 10A2", "homeroom_teacher": "Tr·∫ßn Th·ªã B", 
             "student_count": 32, "room": "A102", "schedule": "S√°ng"},
            {"class_id": "11A1", "class_name": "L·ªõp 11A1", "homeroom_teacher": "L√™ VƒÉn C", 
             "student_count": 30, "room": "B101", "schedule": "Chi·ªÅu"},
            {"class_id": "11A2", "class_name": "L·ªõp 11A2", "homeroom_teacher": "Ph·∫°m Th·ªã D", 
             "student_count": 28, "room": "B102", "schedule": "Chi·ªÅu"},
            {"class_id": "12A1", "class_name": "L·ªõp 12A1", "homeroom_teacher": "Ho√†ng VƒÉn E", 
             "student_count": 33, "room": "C101", "schedule": "S√°ng"},
        ]
    
    def _create_toolbar(self):
        """T·∫°o toolbar v·ªõi c√°c n√∫t ch·ª©c nƒÉng"""
        toolbar_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        toolbar_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=(0, 10))
        toolbar_frame.columnconfigure(1, weight=1)
        
        # N√∫t th√™m l·ªõp
        add_btn = ttk.Button(toolbar_frame, text="‚ûï Th√™m l·ªõp", 
                           command=self._add_class)
        add_btn.grid(row=0, column=0, padx=(0, 10))
        
        # N√∫t s·ª≠a l·ªõp
        edit_btn = ttk.Button(toolbar_frame, text="‚úèÔ∏è S·ª≠a l·ªõp", 
                            command=self._edit_class)
        edit_btn.grid(row=0, column=1, padx=(0, 10))
        
        # N√∫t x√≥a l·ªõp
        delete_btn = ttk.Button(toolbar_frame, text="üóëÔ∏è X√≥a l·ªõp", 
                              command=self._delete_class)
        delete_btn.grid(row=0, column=2, padx=(0, 10))
        
        # Search box
        search_frame = ttk.Frame(toolbar_frame, style="White.TFrame")
        search_frame.grid(row=0, column=3, sticky="e")
        
        ttk.Label(search_frame, text="T√¨m ki·∫øm:", style="White.TLabel").grid(row=0, column=0, padx=(0, 5))
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=20)
        self.search_entry.grid(row=0, column=1)
        self.search_entry.bind('<KeyRelease>', self._on_search)
    
    def _create_classes_table(self):
        """T·∫°o b·∫£ng danh s√°ch l·ªõp h·ªçc"""
        # Frame cho table
        table_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        table_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=(0, 10))
        table_frame.columnconfigure(0, weight=1)
        table_frame.rowconfigure(0, weight=1)
        
        # Treeview cho table
        columns = ("M√£ l·ªõp", "T√™n l·ªõp", "GVCN", "S·ªë HS", "Ph√≤ng", "Ca h·ªçc")
        self.tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # C·∫•u h√¨nh columns
        for col in columns:
            self.tree.heading(col, text=col)
        
        # C·∫•u h√¨nh width
        self.tree.column("M√£ l·ªõp", width=80, minwidth=80)
        self.tree.column("T√™n l·ªõp", width=120, minwidth=120)
        self.tree.column("GVCN", width=150, minwidth=120)
        self.tree.column("S·ªë HS", width=80, minwidth=80)
        self.tree.column("Ph√≤ng", width=80, minwidth=80)
        self.tree.column("Ca h·ªçc", width=80, minwidth=80)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # Grid
        self.tree.grid(row=0, column=0, sticky="nsew")
        scrollbar.grid(row=0, column=1, sticky="ns")
        
        # Bind events
        self.tree.bind('<Double-1>', self._on_double_click)
        self.tree.bind('<Button-1>', self._on_select)
        
        # Load data
        self._load_classes_to_table()
    
    def _create_status_bar(self):
        """T·∫°o status bar"""
        self.status_frame = ttk.Frame(self.content_frame, style="White.TFrame")
        self.status_frame.grid(row=2, column=0, sticky="ew", padx=10, pady=(0, 10))
        self.status_frame.columnconfigure(0, weight=1)
        
        self.status_label = ttk.Label(self.status_frame, text="S·∫µn s√†ng", 
                                    style="White.TLabel")
        self.status_label.grid(row=0, column=0, sticky="w")
        
        # C·∫≠p nh·∫≠t status
        self._update_status()
    
    def _load_classes_to_table(self):
        """Load d·ªØ li·ªáu l·ªõp h·ªçc v√†o table"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Th√™m d·ªØ li·ªáu m·ªõi
        for class_item in self.classes_data:
            self.tree.insert("", "end", values=(
                class_item["class_id"],
                class_item["class_name"],
                class_item["homeroom_teacher"],
                class_item["student_count"],
                class_item["room"],
                class_item["schedule"]
            ))
    
    def _on_search(self, event=None):
        """X·ª≠ l√Ω t√¨m ki·∫øm"""
        search_term = self.search_var.get().lower()
        if not search_term:
            self._load_classes_to_table()
            return
        
        # Filter data
        filtered_data = [
            class_item for class_item in self.classes_data
            if search_term in class_item["class_name"].lower() or 
               search_term in class_item["homeroom_teacher"].lower() or
               search_term in class_item["class_id"].lower()
        ]
        
        # Update table
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        for class_item in filtered_data:
            self.tree.insert("", "end", values=(
                class_item["class_id"],
                class_item["class_name"],
                class_item["homeroom_teacher"],
                class_item["student_count"],
                class_item["room"],
                class_item["schedule"]
            ))
    
    def _on_double_click(self, event):
        """X·ª≠ l√Ω double click"""
        self._edit_class()
    
    def _on_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn item"""
        pass
    
    def _add_class(self):
        """Th√™m l·ªõp m·ªõi"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng th√™m l·ªõp - ƒêang ph√°t tri·ªÉn")
    
    def _edit_class(self):
        """S·ª≠a th√¥ng tin l·ªõp"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn l·ªõp c·∫ßn s·ª≠a")
            return
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng s·ª≠a l·ªõp - ƒêang ph√°t tri·ªÉn")
    
    def _delete_class(self):
        """X√≥a l·ªõp"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn l·ªõp c·∫ßn x√≥a")
            return
        
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªõp n√†y?"):
            # X√≥a kh·ªèi data
            item = self.tree.item(selected[0])
            class_id = item['values'][0]
            self.classes_data = [c for c in self.classes_data if c['class_id'] != class_id]
            
            # C·∫≠p nh·∫≠t table
            self._load_classes_to_table()
            self._update_status()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a l·ªõp th√†nh c√¥ng")
    
    def _update_status(self):
        """C·∫≠p nh·∫≠t status bar"""
        total_classes = len(self.classes_data)
        self.status_label.config(text=f"T·ªïng s·ªë l·ªõp: {total_classes}")
    
    def refresh(self):
        """Refresh view"""
        self._load_classes_to_table()
        self._update_status()



